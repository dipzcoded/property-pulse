// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  userName          String
  image             String
  emailVerified     DateTime?
  bookmarks         UserPropertyBookmarks[]
  properties        Property[]
  accounts          Account[]
  sessions          Session[]
  recipientMessages Message[] @relation(name: "UserReceivedMessages")
  senderMessages    Message[] @relation(name: "UserSentMessages")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model UserPropertyBookmarks {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, propertyId])
}

model Property {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  owner       User       @relation(fields: [userId], references: [id])
  name        String
  type        String
  description String
  location    Location
  beds        Int
  baths       Int
  squareFeet  Int
  amenities   String[]
  rate        Rate
  sellerInfo  SellerInfo
  images      String[]
  propertyMessages Message[]

  isFeatured    Boolean                 @default(false)
  userBookmarks UserPropertyBookmarks[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model Message {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  senderUserId    String   @db.ObjectId
  recipientUserId String   @db.ObjectId
  propertyId String @db.ObjectId
  property Property @relation(fields: [propertyId],references: [id])
  name String
  email String
  phone String
  body String
  read Boolean @default(false)
  
  senderUser      User     @relation(name: "UserSentMessages", fields: [senderUserId], references: [id])
  recipientUser   User     @relation(name: "UserReceivedMessages", fields: [recipientUserId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

type SellerInfo {
  name  String
  email String
  phone String
}

type Rate {
  nightly Int?
  weekly  Int?
  monthly Int?
}

type Location {
  street  String
  city    String
  state   String
  zipCode String
}
